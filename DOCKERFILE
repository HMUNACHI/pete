# Use a Miniconda base image
FROM continuumio/miniconda3 AS builder

WORKDIR /app

# Install git, build-essential for C++/CUDA compilation
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    build-essential \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Copy environment file and project code
COPY environment.yml .
COPY polynomial_embeddings ./polynomial_embeddings
COPY src ./src

COPY main.py .
COPY setup.py . # Copying root setup.py, though it might be unused/redundant
COPY supervisord.conf .

# Create conda environment from file
# Make sure the environment name matches the one in environment.yml (pete_env)
RUN conda env create -f environment.yml

# IMPORTANT: Activate conda environment IN the RUN command for subsequent commands
# Or use conda run -n <env_name>
RUN echo "source activate pete_env" > ~/.bashrc
ENV PATH /opt/conda/envs/pete_env/bin:$PATH

# Install the custom C++/CUDA extension inside the conda environment
# Using conda run to ensure it uses the environment's python/pip
RUN conda run -n pete_env pip install --no-cache-dir ./polynomial_embeddings

# --- Final Stage ---
FROM continuumio/miniconda3

WORKDIR /app

# Install supervisor in the final stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Copy the built environment and application code from the builder stage
COPY --from=builder /opt/conda/envs/pete_env /opt/conda/envs/pete_env
COPY --from=builder /app /app

# Set the environment path for the final image
ENV PATH /opt/conda/envs/pete_env/bin:$PATH

# Create non-root user
RUN useradd -ms /bin/bash myuser
USER myuser
WORKDIR /app # Set workdir again for the new user

# Expose TensorBoard port
EXPOSE 6006

# Copy supervisor config
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Run supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
